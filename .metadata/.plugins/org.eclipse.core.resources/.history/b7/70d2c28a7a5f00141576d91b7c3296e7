/**
 * 
 */
package org.asd.silver.shared.alpah;

import java.util.Map;
import javax.annotation.Generated;
import org.asd.silver.shared.alpah.NewPartFormData.Common;
import org.asd.silver.shared.alpah.NewPartFormData.Company;
import org.asd.silver.shared.alpah.NewPartFormData.Division;
import org.asd.silver.shared.alpah.NewPartFormData.Name;
import org.asd.silver.shared.alpah.NewPartFormData.PartNumber;
import org.asd.silver.shared.alpah.NewPartFormData.Program;
import org.asd.silver.shared.alpah.NewPartFormData.QuoteOnly;
import org.asd.silver.shared.alpah.NewPartFormData.Revision;
import org.asd.silver.shared.delta.CompanyLookupCall;
import org.asd.silver.shared.delta.DivisionLookupCall;
import org.asd.silver.shared.delta.ProgramLookupCall;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class NewPartFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public NewPartFormData() {
  }

  public Common getCommon() {
    return getFieldByClass(Common.class);
  }

  public Company getCompany() {
    return getFieldByClass(Company.class);
  }

  public Division getDivision() {
    return getFieldByClass(Division.class);
  }

  public Name getName() {
    return getFieldByClass(Name.class);
  }

  public PartNumber getPartNumber() {
    return getFieldByClass(PartNumber.class);
  }

  public Program getProgram() {
    return getFieldByClass(Program.class);
  }

  public QuoteOnly getQuoteOnly() {
    return getFieldByClass(QuoteOnly.class);
  }

  public Revision getRevision() {
    return getFieldByClass(Revision.class);
  }

  public static class Common extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Common() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Company extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Company() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.LOOKUP_CALL, CompanyLookupCall.class);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class Division extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Division() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.LOOKUP_CALL, DivisionLookupCall.class);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class Name extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Name() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class PartNumber extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public PartNumber() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Program extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Program() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.LOOKUP_CALL, ProgramLookupCall.class);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class QuoteOnly extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public QuoteOnly() {
    }
  }

  public static class Revision extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Revision() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }
}
