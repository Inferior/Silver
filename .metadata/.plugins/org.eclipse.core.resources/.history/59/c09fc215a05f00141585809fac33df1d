/**
 * 
 */
package org.asd.silver.client.alpha;

import org.asd.silver.client.alpha.NewCompanyForm.MainBox;
import org.asd.silver.client.alpha.NewCompanyForm.MainBox.CancelButton;
import org.asd.silver.client.alpha.NewCompanyForm.MainBox.OkButton;
import org.asd.silver.client.alpha.NewCompanyForm.ModifyHandler;
import org.asd.silver.client.alpha.NewCompanyForm.NewHandler;
import org.asd.silver.shared.alpha.INewCompanyService;
import org.asd.silver.shared.alpha.NewCompanyFormData;
import org.asd.silver.shared.alpha.UpdateNewCompanyPermission;
import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.FormData.SdkCommand;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.shared.TEXTS;
import org.eclipse.scout.service.SERVICES;

/**
 * @author AndrewL
 *
 */
@FormData(value = NewCompanyFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class NewCompanyForm extends AbstractForm{

/**
 * @throws org.eclipse.scout.commons.exception.ProcessingException
 */
public NewCompanyForm() throws ProcessingException{
super();
}
@Override
protected String getConfiguredTitle(){
  return TEXTS.get("NewCompany");
}
/**
 * @throws org.eclipse.scout.commons.exception.ProcessingException
 */
public void startModify() throws ProcessingException{
startInternal(new ModifyHandler());
}
/**
 * @throws org.eclipse.scout.commons.exception.ProcessingException
 */
public void startNew() throws ProcessingException{
startInternal(new NewHandler());
}
/**
 * @return the CancelButton
 */
public CancelButton getCancelButton(){
return getFieldByClass(CancelButton.class);
}
/**
 * @return the MainBox
 */
public MainBox getMainBox(){
return getFieldByClass(MainBox.class);
}
/**
 * @return the OkButton
 */
public OkButton getOkButton(){
return getFieldByClass(OkButton.class);
}

@Order(10.0)
public class MainBox extends AbstractGroupBox{

@Order(10.0)
public class OkButton extends AbstractOkButton{
}
@Order(20.0)
public class CancelButton extends AbstractCancelButton{
}
}
public class ModifyHandler extends AbstractFormHandler{

@Override
protected void execLoad() throws ProcessingException{
INewCompanyService service = SERVICES.getService(INewCompanyService.class);
NewCompanyFormData formData = new NewCompanyFormData();
exportFormData(formData);
formData = service.load(formData);
importFormData(formData);
setEnabledPermission(new UpdateNewCompanyPermission());

}
@Override
protected void execStore() throws ProcessingException{
INewCompanyService service = SERVICES.getService(INewCompanyService.class);
NewCompanyFormData formData = new NewCompanyFormData();
exportFormData(formData);
formData = service.store(formData);

}
}
public class NewHandler extends AbstractFormHandler{

@Override
protected void execLoad() throws ProcessingException{
INewCompanyService service = SERVICES.getService(INewCompanyService.class);
NewCompanyFormData formData = new NewCompanyFormData();
exportFormData(formData);
formData = service.prepareCreate(formData);
importFormData(formData);

}
@Override
protected void execStore() throws ProcessingException{
INewCompanyService service = SERVICES.getService(INewCompanyService.class);
NewCompanyFormData formData = new NewCompanyFormData();
exportFormData(formData);
formData = service.create(formData);

}
}
}